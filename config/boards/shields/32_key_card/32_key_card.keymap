#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define alpha 0
#define num   1
#define misc  2

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
          bindings = <
        //╭──────┬──────┬──────┬──────┬──────╮                          ╭────────┬──────────┬──────┬──────┬──────────╮
        //│  Q   │  W   │  E   │  R   │  T   │                          │  P     │    O     │  I   │  U   │   Y      │
           &kp Q  &kp W  &kp E  &kp R  &kp T                              &kp P    &kp O     &kp I  &kp U    &kp Y
        //├──────┼──────┼──────┼──────┼──────┤                          ├────────┼──────────┼──────┼──────┼──────────┤
        //│  A   │  S   │  D   │  F   │  G   │                          │    ;   │     L    │   K  │  J   │   H      │
           &kp A  &kp S  &kp D  &kp F  &kp G                             &kp SEMI    &kp L   &kp K   &kp J    &kp H 
        //├──────┼──────┼──────┼──────┼──────┼─────────╮       ╭────────┼────────┼──────────┼──────┼──────┼──────────┤
        //│  Z   │  X   │  C   │  V   │  B   │         │       │        │    .   │    ,     │  M   │  N   │  SPACE   │
           &kp Z  &kp X  &kp C  &kp V  &kp B  &mt LSHIFT SPACE   &kp BSLH  &kp DOT  &kp COMMA  &kp M  &kp N  &lt 1 SPACE
        //╰──────┴──────┴──────┴──────┴──────┴─────────╯       ╰────────┴────────┴──────────┴──────┴──────┴──────────╯
            >;
        };
        right_layer {
          bindings = <
        //╭────────┬──────────┬─────────┬──────────┬─────────╮                            ╭────────┬──────────┬────────┬─────────┬───────────╮
        //│  1     │  2       │  3      │  4       │  5      │                            │  {     │    }     │  [     │  ]      │   |       │
           &kp 1    &kp 2      &kp 3     &kp 4      &kp 5                                  &kp LBRC  &kp RBRC  &kp LBKT  &kp RBKT  &kp PIPE
        //├────────┼──────────┼─────────┼──────────┼─────────┤                            ├────────┼──────────┼────────┼─────────┼───────────┤
        //│  6     │  7       │  8      │  9       │  0      │                            │    <   │     >    │   (    │  )      │   ~       │
           &kp 6    &kp 7      &kp 8     &kp 9      &kp 0                                  &kp LT  &kp GT  &kp LPAR  &kp RPAR  &kp TILDE
        //├────────┼──────────┼─────────┼──────────┼─────────┼─────────╮         ╭────────┼────────┼──────────┼────────┼─────────┼───────────┤
        //│  +     │  -       │  *      │  /       │  =      │         │         │   /    │    .   │    ,     │  ,     │  .      │  SPACE    │
           &kp PLUS  &kp MINUS  &kp STAR  &kp BSLH  &kp EQUAL  &mt LSHIFT SPACE  &kp BSLH  &kp DOT  &kp COMMA  &kp COMMA  &kp DOT  &kp SPACE  
        //╰────────┴──────────┴─────────┴──────────┴─────────┴─────────╯         ╰────────┴────────┴──────────┴────────┴─────────┴───────────╯
            >;
        };
    };
};
//&td &caps_word. Tap dance caps word for double tap. Hold for shift. Tap once for space?
